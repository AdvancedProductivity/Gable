package org.adp.gable.api.service;

import lombok.extern.slf4j.Slf4j;
import org.adp.gable.api.DocConst;
import org.adp.gable.api.dao.*;
import org.adp.gable.api.dto.HttpApiDto;
import org.adp.gable.api.dto.doc.DocBlockDto;
import org.adp.gable.api.dto.http.FormKeyValueDto;
import org.adp.gable.api.dto.http.KeyValueDto;
import org.adp.gable.api.entity.*;
import org.adp.gable.api.utils.DocBlockUtils;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author zzq
 */
@Service
@Slf4j
public class DocAutoGenerateService {

    @Resource
    private DocMenuDao docMenuDao;

    @Resource
    private ApiCollectionDao apiCollectionDao;

    @Resource
    private ApiMenuItemDao apiMenuItemDao;

    @Resource
    private DocDefineDao docDefineDao;

    @Resource
    private DocBlockDao docBlockDao;

    @Async
    @Transactional(rollbackOn = Exception.class)
    @Modifying
    public void autoGenerateDefaultDoc(Long id, HttpApiDto waitForSave) {
        // api`s menu
        ApiMenuItem apiMenu = this.apiMenuItemDao.findFirstByDefineId(id);
        // find the doc menu
        Long apiMenuId = apiMenu.getId();
        String apiKey = apiMenuId + "_http";
        DocMenu docMenu = docMenuDao.findFirstByApiKey(apiKey);
        if (docMenu == null) {
            docMenu = this.autoGenerateMenu(apiMenuId, apiMenu.getCollectionId(), apiMenu.getName());
        }
        if (docMenu == null) {
            return;
        }
        // auto generate menu level: 3
        //text: "简要描述" type  header
        Long docDefineId = docMenu.getId();
        List<DocBlockDto> blocks = doGenerateDocs(docDefineId, waitForSave, id);
        // delete all blocks
        this.docBlockDao.deleteByDocDefineIdAndOrderGreaterThanEqual(docDefineId, 0);
        // restore all new block data
        List<DocBlock> newBlocks = new ArrayList<>(blocks.size());
        for (DocBlockDto block : blocks) {
            newBlocks.add(block.translateToEntity());
        }
        this.docBlockDao.saveAll(newBlocks);
    }

    private List<DocBlockDto> doGenerateDocs(Long docDefineId, HttpApiDto waitForSave, Long httpId) {
        List<DocBlockDto> blocks = new ArrayList<>();
        int order = 1;
        // generate url title
        blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.DOC_URL", order++, docDefineId));
        // generate url
        blocks.add(DocBlockUtils.generateUrlBlock(waitForSave, order++, docDefineId));
        List<KeyValueDto> headerList = waitForSave.getHeader().stream().filter(KeyValueDto::isNotIgnore).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(headerList)) {
            // generate header title
            blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.DOC_HEADER", order++, docDefineId));
            // generate url
            blocks.add(DocBlockUtils.generateTableForKeyValue(headerList, order++, docDefineId));
        }
        // generate request type
        blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.REQ_TYPE", order++, docDefineId));
        // request type
        blocks.add(DocBlockUtils.generateRequestType(waitForSave, order++, docDefineId));
        List<KeyValueDto> queries = waitForSave.getQuery().stream().filter(KeyValueDto::isNotIgnore).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(queries)) {
            // generate header title
            blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.QUERY_PARAM", order++, docDefineId));
            // generate query parameter
            blocks.add(DocBlockUtils.generateTableForKeyValue(queries, order++, docDefineId));
        }

        String method = waitForSave.getMethod();
        if (StringUtils.equalsIgnoreCase(method, "PUT") || StringUtils.equalsIgnoreCase(method, "POST")) {
            String bodyType = waitForSave.getBodyType();
            if (StringUtils.equals(bodyType, "urlencoded")) {
                List<KeyValueDto> encoded = waitForSave.getBodyUrlEncoded().stream().filter(KeyValueDto::isNotIgnore).collect(Collectors.toList());
                if (CollectionUtils.isNotEmpty(encoded)) {
                    blocks.add(DocBlockUtils.generateTitle("x-www-form-urlencoded", order++, docDefineId));
                    // generate query url encoded
                    blocks.add(DocBlockUtils.generateTableForKeyValue(encoded, order++, docDefineId));
                }
            } else if (StringUtils.equals(bodyType, "form_data")) {
                List<FormKeyValueDto> froms = waitForSave.getBodyForm().stream().filter(FormKeyValueDto::isNotIgnore).collect(Collectors.toList());
                if (CollectionUtils.isNotEmpty(froms)) {
                    blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.FORM_DATA", order++, docDefineId));
                    // generate query url encoded
                    blocks.add(DocBlockUtils.generateTableForForm(froms, order++, docDefineId));
                }
            } else if (StringUtils.equals(bodyType, "raw")) {
                if (StringUtils.equals("json", waitForSave.getBodyTextType())) {
                    blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.BODY_TEXT_INFO", order++, docDefineId));
                    // generate body text
                    blocks.add(DocBlockUtils.generateJsonTree(waitForSave.getBodyTextDoc(), order++, docDefineId));
                }
                blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.BODY_TEXT", order++, docDefineId));
                // generate body text
                blocks.add(DocBlockUtils.generateRawText(waitForSave, order++, docDefineId));
            }
        }
        if (CollectionUtils.isNotEmpty(waitForSave.getRespBodyTextDoc()) && waitForSave.getRespBodyTextDoc().size() > 1) {
            blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.RESP_BODY_TEXT_INFO", order++, docDefineId));
            // generate return body text
            blocks.add(DocBlockUtils.generateJsonTree(waitForSave.getRespBodyTextDoc(), order++, docDefineId));
        }
        blocks.add(DocBlockUtils.generateI18nTitle("PAGES.DOCS.RUNNER", order++, docDefineId));

        // get api name and collection
        ApiMenuItem httpMenuData = this.apiMenuItemDao.findFirstByDefineId(httpId);
        ApiCollection collectionData = this.apiCollectionDao.findById(httpMenuData.getCollectionId()).orElse(null);
        blocks.add(DocBlockUtils.generateHttpRunner(waitForSave, order++, docDefineId, httpMenuData, collectionData));
        return blocks;
    }

    private DocMenu autoGenerateMenu(Long apiId, Long collectionId,String apiName) {
        log.info("{}'s doc menu not exist, auto generate...", apiId);
        // find collection menu
        ApiCollection collectionData = this.apiCollectionDao.findById(collectionId).orElse(null);
        if (collectionData == null) {
            log.error("apiId {}‘s collection menu not exist", apiId);
            return null;
        }
        String collectionKey = collectionData.getId() + "_" + "c";
        DocMenu cMenu = docMenuDao.findFirstByApiKey(collectionKey);
        if (cMenu == null) {
            Integer itemCount = this.apiMenuItemDao.countByCollectionId(collectionId);
            log.info("collection menu {} not exist, auto generate...", collectionKey);
            DocMenu docMenu = new DocMenu();
            docMenu.setName(collectionData.getName());
            docMenu.setDocId(DocConst.DEFAULT_DOC_ID);
            docMenu.setLevel(DocConst.COLLECTION_LEVEL);
            docMenu.setItemCount(itemCount);
            docMenu.setParentId(DocConst.DEFAULT_ROOT_PARENT_ID);
            docMenu.setApiKey(collectionKey);
            log.info("add parent collection doc menu: {}", docMenu.toString());
            cMenu = this.docMenuDao.save(docMenu);
            DocDefine docDefine = new DocDefine();
            docDefine.setName(cMenu.getName());
            docDefine.setVersion(DocConst.DEFAULT_EDITOR_VERSION);
            docDefine.setTime(System.currentTimeMillis());
            docDefine.setId(cMenu.getId());
            this.docDefineDao.save(docDefine);
        }
        // add api doc menu
        DocMenu docMenu = new DocMenu();
        docMenu.setName(apiName);
        docMenu.setDocId(DocConst.DEFAULT_DOC_ID);
        docMenu.setLevel(DocConst.API_LEVEL);
        docMenu.setItemCount(0);
        docMenu.setParentId(cMenu.getId());
        docMenu.setApiKey(apiId + "_http");
        docMenu = this.docMenuDao.save(docMenu);
        DocDefine docDefine = new DocDefine();
        docDefine.setId(docMenu.getId());
        docDefine.setName(docMenu.getName());
        docDefine.setVersion(DocConst.DEFAULT_EDITOR_VERSION);
        docDefine.setTime(System.currentTimeMillis());
        this.docDefineDao.save(docDefine);
        return docMenu;
    }

    @Async
    @Transactional(rollbackOn = Exception.class)
    @Modifying
    public void renameDocName(String apiKey, String newName) {
        DocMenu docMenu = this.docMenuDao.findFirstByApiKey(apiKey);
        if (docMenu == null) {
            log.info("not find doc menu of key: {}", apiKey);
            return;
        }
        docMenu.setName(newName);
        this.docMenuDao.saveAndFlush(docMenu);
        DocDefine docDefine = this.docDefineDao.findById(docMenu.getId()).orElse(null);
        if (docDefine != null) {
            docDefine.setName(newName);
            this.docDefineDao.saveAndFlush(docDefine);
        }
    }
}

